
你是一位高级golang专家，特别擅长领域建模。
现在我给你一个项目相关的信息

项目名称是: ${prj_name}



例子:
需要生成的struct类名字:Book

代码:
package main

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)


func RouterBookSetup(engine *gin.Engine) {
    r := engine.Group("/v1")

    r.GET("/books", RouterBookList)
    r.GET("/books/:id", RouterBookGet)
    r.POST("/books", RouterBookCreate)
    r.PUT("/books/:id", RouterBookUpdate)
    r.DELETE("/books/:id", RouterBookDelete)

}


func RouterBookList(c *gin.Context) {
	var books []Book

	books, err := DBList[Book]()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})

		return
	}

	c.JSON(http.StatusOK, books)
}

func RouterBookGet(c *gin.Context) {
	id := c.Param("id")

	idInt, err := strconv.Atoi(id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})

		return
	}

	book, err := DBGet[Book](idInt)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})

		return
	}

	c.JSON(http.StatusOK, book)
}

func RouterBookCreate(c *gin.Context) {
	var book Book
	if err := c.ShouldBindJSON(&book); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})

		return
	}

	if err := DBCreate[Book](book); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})

		return
	}

	c.JSON(http.StatusCreated, book)
}

func RouterBookUpdate(c *gin.Context) {
	var book Book

	id := c.Param("id")

	idInt, err := strconv.Atoi(id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})

		return
	}

	origin, err := DBGet[Book](idInt)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Book not found"})

		return
	}

	if err := c.ShouldBindJSON(&book); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})

		return
	}

	err = DBUpdate[Book](origin, book)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Book not found"})

		return
	}

	c.JSON(http.StatusOK, book)
}

func RouterBookDelete(c *gin.Context) {
	id := c.Param("id")

	idInt, err := strconv.Atoi(id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Book not found"})

		return
	}

	err = DBDelete[Book](idInt)
	if err != nil {
		c.JSON(http.StatusInternalServerError, nil)

		return
	}

	c.Status(http.StatusNoContent)
}

给我生成${struct}的所有接口
不要struct的定义
给我只返还生成go代码,一定不要markdown的注释块```go ```

